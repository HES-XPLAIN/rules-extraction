Search.setIndex({"docnames": ["index", "modules", "rules_extraction", "tests"], "filenames": ["index.rst", "modules.rst", "rules_extraction.rst", "tests.rst"], "titles": ["Welcome to Rules Extraction\u2019s documentation!", "rules-extraction", "rules_extraction package", "tests package"], "terms": {"rules_extract": [0, 1], "packag": [0, 1], "test": [0, 1, 2], "index": [0, 2], "modul": [0, 1], "search": 0, "page": 0, "submodul": 1, "hello": [1, 3], "hello_nam": [1, 2, 3], "hello_world": [1, 2, 3], "plot": 1, "plot_accuraci": [1, 2], "plot_fronti": [1, 2], "transform": [1, 2], "ensemblerul": [1, 2], "fit": [1, 2], "predict": [1, 2], "score": [1, 2], "rulerank": [1, 2], "data_to_rul": [1, 2], "fit_perceptron": [1, 2], "is_rul": [1, 2], "op": [1, 2], "rank_rul": [1, 2], "util": 1, "compute_avg_featur": [1, 2], "extract_all_rul": [1, 2], "extract_features_resnet": [1, 2], "extract_features_vgg": [1, 2], "extract_rul": [1, 2], "filter_dataset": [1, 2], "is_torch_load": [1, 2], "is_torch_model": [1, 2], "make_target_df": [1, 2], "recurs": [1, 2], "content": 1, "test_hello": 1, "testhello": [1, 3], "test_hello_nam": [1, 3], "test_hello_world": [1, 3], "name": [2, 3], "string": [2, 3], "str": 2, "A": [2, 3], "repres": 2, "person": 2, "greet": 2, "type": 2, "world": [2, 3], "df_test": 2, "class_nam": 2, "none": 2, "n": 2, "5": 2, "save_path": 2, "option": 2, "save": 2, "accuraci": 2, "v": 2, "number": 2, "x_test": 2, "data": 2, "featur": 2, "y_test": 2, "label": 2, "class": [2, 3], "int": 2, "maximum": 2, "consid": 2, "provid": 2, "path": 2, "where": 2, "df": 2, "target_class": 2, "model": 2, "alpha": 2, "0": 2, "65": 2, "devic": 2, "show": 2, "one": 2, "frontier": 2, "embed": 2, "imag": 2, "store": 2, "you": 2, "want": 2, "should": 2, "object": 2, "torch": 2, "us": 2, "float": 2, "between": 2, "1": 2, "transpar": 2, "level": 2, "base": [2, 3], "baseestim": 2, "classifiermixin": 2, "simpl": 2, "ensembl": 2, "classifi": 2, "list": 2, "individu": 2, "x": 2, "y": 2, "train": 2, "given": 2, "calcul": 2, "true": 2, "arrai": 2, "like": 2, "pd": 2, "datafram": 2, "The": 2, "input": 2, "sampl": 2, "target": 2, "valu": 2, "self": 2, "an": 2, "instanc": 2, "condit": 2, "defin": 2, "assign": 2, "when": [2, 3], "ar": 2, "met": 2, "dict": 2, "dictionari": 2, "map": 2, "comparison": 2, "oper": 2, "correspond": 2, "function": [2, 3], "thi": 2, "basic": 2, "implement": 2, "default": 2, "ignor": 2, "handler": 2, "manag": 2, "appli": 2, "evalu": 2, "extract": 2, "from": 2, "random": 2, "forest": 2, "each": 2, "x_arr": 2, "dataset": 2, "set": [2, 3], "creat": 2, "binari": 2, "numpi": 2, "ndarrai": 2, "x_train": 2, "y_train": 2, "penalti": 2, "l1": 2, "01": 2, "kwarg": 2, "perceptron": 2, "i": [2, 3], "constant": 2, "multipli": 2, "regular": 2, "term": 2, "static": 2, "data_point": 2, "check": 2, "whether": 2, "point": 2, "satisfi": 2, "particular": 2, "tupl": 2, "against": 2, "which": 2, "expect": 2, "fals": 2, "otherwis": 2, "bool": 2, "built": 2, "ne": 2, "lt": 2, "le": 2, "eq": 2, "gt": 2, "ge": 2, "rank": 2, "absolut": 2, "coeffici": 2, "top": 2, "contain": 2, "its": 2, "import": 2, "valueerror": 2, "If": 2, "ha": 2, "been": 2, "loader": 2, "class_dict": 2, "comput": 2, "averag": 2, "pre": 2, "pytorch": 2, "nn": 2, "neural": 2, "network": 2, "dataload": 2, "indic": 2, "cpu": 2, "gpu": 2, "perform": 2, "file": 2, "typeerror": 2, "result": 2, "includ": 2, "features_map": 2, "csv": 2, "all": 2, "tree": 2, "addit": 2, "configur": 2, "randomforestclassifi": 2, "n_estim": 2, "100": 2, "other": 2, "avail": 2, "predefin": 2, "resnet": 2, "NOT": 2, "tensor": 2, "vgg": 2, "feature_column": 2, "singl": 2, "decis": 2, "identifi": 2, "correctli": 2, "datapoint": 2, "allow": 2, "filter": 2, "obtain": 2, "iter": 2, "over": 2, "batch": 2, "correct": 2, "can": 2, "further": 2, "analysi": 2, "obj": 2, "ani": 2, "df_featur": 2, "produc": 2, "new": 2, "tree_": 2, "feature_nam": 2, "node": 2, "current_rul": 2, "rules_list": 2, "travers": 2, "methodnam": 3, "runtest": 3, "testcas": 3, "case": 3, "return": 3, "paramet": 3}, "objects": {"": [[2, 0, 0, "-", "rules_extraction"], [3, 0, 0, "-", "tests"]], "rules_extraction": [[2, 0, 0, "-", "hello"], [2, 0, 0, "-", "plot"], [2, 0, 0, "-", "rules"], [2, 0, 0, "-", "utils"]], "rules_extraction.hello": [[2, 1, 1, "", "hello_name"], [2, 1, 1, "", "hello_world"]], "rules_extraction.plot": [[2, 1, 1, "", "plot_accuracy"], [2, 1, 1, "", "plot_frontier"], [2, 1, 1, "", "transform"]], "rules_extraction.rules": [[2, 2, 1, "", "EnsembleRule"], [2, 2, 1, "", "Rule"], [2, 2, 1, "", "RuleRanker"]], "rules_extraction.rules.EnsembleRule": [[2, 3, 1, "", "fit"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "score"]], "rules_extraction.rules.Rule": [[2, 3, 1, "", "fit"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "score"]], "rules_extraction.rules.RuleRanker": [[2, 3, 1, "", "data_to_rules"], [2, 3, 1, "", "fit_perceptron"], [2, 3, 1, "", "is_rule"], [2, 4, 1, "", "ops"], [2, 3, 1, "", "rank_rules"]], "rules_extraction.utils": [[2, 1, 1, "", "compute_avg_features"], [2, 1, 1, "", "extract_all_rules"], [2, 1, 1, "", "extract_features_resnet"], [2, 1, 1, "", "extract_features_vgg"], [2, 1, 1, "", "extract_rules"], [2, 1, 1, "", "filter_dataset"], [2, 1, 1, "", "is_torch_loader"], [2, 1, 1, "", "is_torch_model"], [2, 1, 1, "", "make_target_df"], [2, 1, 1, "", "recurse"]], "tests": [[3, 0, 0, "-", "test_hello"]], "tests.test_hello": [[3, 2, 1, "", "TestHello"]], "tests.test_hello.TestHello": [[3, 3, 1, "", "test_hello_name"], [3, 3, 1, "", "test_hello_world"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"welcom": 0, "rule": [0, 1, 2], "extract": [0, 1], "": 0, "document": 0, "content": [0, 2, 3], "indic": 0, "tabl": 0, "rules_extract": 2, "packag": [2, 3], "submodul": [2, 3], "hello": 2, "modul": [2, 3], "plot": 2, "paramet": 2, "method": 2, "return": 2, "attribut": 2, "util": 2, "rais": 2, "note": 2, "test": 3, "test_hello": 3}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Welcome to Rules Extraction\u2019s documentation!": [[0, "welcome-to-rules-extraction-s-documentation"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "rules-extraction": [[1, "rules-extraction"]], "rules_extraction package": [[2, "rules-extraction-package"]], "Submodules": [[2, "submodules"], [3, "submodules"]], "rules_extraction.hello module": [[2, "module-rules_extraction.hello"]], "rules_extraction.plot module": [[2, "module-rules_extraction.plot"]], "rules_extraction.rules module": [[2, "module-rules_extraction.rules"]], "Parameters": [[2, "parameters"], [2, "id1"], [2, "id2"], [2, "id4"], [2, "id6"], [2, "id8"], [2, "id10"], [2, "id12"], [2, "id14"], [2, "id18"], [2, "id19"], [2, "id21"], [2, "id25"]], "Methods": [[2, "methods"], [2, "id7"]], "Returns": [[2, "returns"], [2, "id3"], [2, "id5"], [2, "id9"], [2, "id11"], [2, "id13"], [2, "id15"], [2, "id20"], [2, "id22"], [2, "id26"]], "Attributes": [[2, "attributes"]], "rules_extraction.utils module": [[2, "module-rules_extraction.utils"]], "Raises": [[2, "raises"], [2, "id23"]], "Notes": [[2, "notes"], [2, "id24"]], "Module contents": [[2, "module-rules_extraction"], [3, "module-tests"]], "tests package": [[3, "tests-package"]], "tests.test_hello module": [[3, "module-tests.test_hello"]]}, "indexentries": {"ensemblerule (class in rules_extraction.rules)": [[2, "rules_extraction.rules.EnsembleRule"]], "rule (class in rules_extraction.rules)": [[2, "rules_extraction.rules.Rule"]], "ruleranker (class in rules_extraction.rules)": [[2, "rules_extraction.rules.RuleRanker"]], "compute_avg_features() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.compute_avg_features"]], "data_to_rules() (rules_extraction.rules.ruleranker method)": [[2, "rules_extraction.rules.RuleRanker.data_to_rules"]], "extract_all_rules() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.extract_all_rules"]], "extract_features_resnet() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.extract_features_resnet"]], "extract_features_vgg() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.extract_features_vgg"]], "extract_rules() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.extract_rules"]], "filter_dataset() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.filter_dataset"]], "fit() (rules_extraction.rules.ensemblerule method)": [[2, "rules_extraction.rules.EnsembleRule.fit"]], "fit() (rules_extraction.rules.rule method)": [[2, "rules_extraction.rules.Rule.fit"]], "fit_perceptron() (rules_extraction.rules.ruleranker method)": [[2, "rules_extraction.rules.RuleRanker.fit_perceptron"]], "hello_name() (in module rules_extraction.hello)": [[2, "rules_extraction.hello.hello_name"]], "hello_world() (in module rules_extraction.hello)": [[2, "rules_extraction.hello.hello_world"]], "is_rule() (rules_extraction.rules.ruleranker static method)": [[2, "rules_extraction.rules.RuleRanker.is_rule"]], "is_torch_loader() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.is_torch_loader"]], "is_torch_model() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.is_torch_model"]], "make_target_df() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.make_target_df"]], "module": [[2, "module-rules_extraction"], [2, "module-rules_extraction.hello"], [2, "module-rules_extraction.plot"], [2, "module-rules_extraction.rules"], [2, "module-rules_extraction.utils"], [3, "module-tests"], [3, "module-tests.test_hello"]], "ops (rules_extraction.rules.ruleranker attribute)": [[2, "rules_extraction.rules.RuleRanker.ops"]], "plot_accuracy() (in module rules_extraction.plot)": [[2, "rules_extraction.plot.plot_accuracy"]], "plot_frontier() (in module rules_extraction.plot)": [[2, "rules_extraction.plot.plot_frontier"]], "predict() (rules_extraction.rules.ensemblerule method)": [[2, "rules_extraction.rules.EnsembleRule.predict"]], "predict() (rules_extraction.rules.rule method)": [[2, "rules_extraction.rules.Rule.predict"]], "rank_rules() (rules_extraction.rules.ruleranker method)": [[2, "rules_extraction.rules.RuleRanker.rank_rules"]], "recurse() (in module rules_extraction.utils)": [[2, "rules_extraction.utils.recurse"]], "rules_extraction": [[2, "module-rules_extraction"]], "rules_extraction.hello": [[2, "module-rules_extraction.hello"]], "rules_extraction.plot": [[2, "module-rules_extraction.plot"]], "rules_extraction.rules": [[2, "module-rules_extraction.rules"]], "rules_extraction.utils": [[2, "module-rules_extraction.utils"]], "score() (rules_extraction.rules.ensemblerule method)": [[2, "rules_extraction.rules.EnsembleRule.score"]], "score() (rules_extraction.rules.rule method)": [[2, "rules_extraction.rules.Rule.score"]], "transform() (in module rules_extraction.plot)": [[2, "rules_extraction.plot.transform"]], "testhello (class in tests.test_hello)": [[3, "tests.test_hello.TestHello"]], "test_hello_name() (tests.test_hello.testhello method)": [[3, "tests.test_hello.TestHello.test_hello_name"]], "test_hello_world() (tests.test_hello.testhello method)": [[3, "tests.test_hello.TestHello.test_hello_world"]], "tests": [[3, "module-tests"]], "tests.test_hello": [[3, "module-tests.test_hello"]]}})